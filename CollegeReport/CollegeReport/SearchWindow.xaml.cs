using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Microsoft.Win32;

namespace CollegeReport
{
    /// <summary>
    /// Performs a search on the user selected csv and generates a short report.
    /// /// </summary>
    public partial class SearchWindow : Window
    {
        List<string> Document { get; set; }
        Dictionary<string, int> PropertyPosition { get; set; }
        
        
        public SearchWindow(string file)
        {   
            
           InitializeComponent();
           
           Document = OpenAndReadFile(file);

           PropertyPosition = GetProperties();

                     

        }
        /// <summary>
        /// Takes in the school name generated by MainWindow, searches the csv 
        /// for entries that contain that school name, create and save a report to a file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ReportButton_Click(object sender, RoutedEventArgs e)
        {

                string schoolName = schoolNameTextBox.Text;
                List<string> matches = SearchForSchoolEntries(schoolName);
                PrintReport(matches);
            
            
            
        }

        
        private List<string> OpenAndReadFile(string file)
        {
            List<string> toReturn = null;
            try
            {
               toReturn = File.ReadAllLines(file).ToList();
                
            }
            catch(Exception )
            {
                MessageBox.Show("The file you chose could not be openned. " +
                    "Make sure no other program is currently using that document");
            }
            return toReturn;
        }

        private Dictionary<string, int> GetProperties()
        {
            Dictionary<string, int> propertiesAndIndex = FindIndexOfProperties(Document.ElementAt(0));
            return propertiesAndIndex;
        }
        
        private List<string> SearchForSchoolEntries(string name)
        {
            string nameLowerCase = name.ToLower();
            string[] line;
            string lineNameLowerCase;
            int namePosition = PropertyPosition["INSTNM"];
            List<string> toReturn = new List<string>();


            for (int i=1; i<Document.Count; i++)// skip the first entry which contains our column headers of the file
            {
                line = Document.ElementAt(i).Split(',');
                lineNameLowerCase = line[PropertyPosition["INSTNM"]].ToLower();
                if (lineNameLowerCase.Contains(nameLowerCase)) 
                {
                    toReturn.Add(Document.ElementAt(i));
                }
            }
            return toReturn;
        }

        private Dictionary<string, int> FindIndexOfProperties(string columnHeaders)
        {
            Dictionary<string, int> toReturn = new Dictionary<string, int>();

            string[] headerArray = columnHeaders.Split(',');

            for (int i = 0; i < headerArray.Length; i++)
            {
                if (headerArray[i].Equals("INSTNM"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("CITY"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("STABBR"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("ZIP"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("PREDDEG"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("ADM_RATE"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("INSTURL"))
                {
                    toReturn.Add(headerArray[i],i);
                }
                else if (headerArray[i].Equals("HIGHDEG"))
                {
                    toReturn.Add(headerArray[i], i);
                }
            }
                       
            return toReturn;

        }
        private void PrintReport(List<string>schoolList)
        {

            SaveFileDialog saveDialog = new SaveFileDialog();
            string []line;
           
            string message="";
            StringBuilder outPutString = new StringBuilder("");

            foreach(var school in schoolList)
            {
                line = school.Split(',');
                                                               

                outPutString.Append(
                               $"Institution  Name: {FillReportProperty(line,"INSTNM")}\n" +
                               $"City: {FillReportProperty(line,"CITY")}\n" +
                               $"State: {FillReportProperty(line,"STABBR")}\n" +
                               $"ZIP: {FillReportProperty(line,"ZIP")}\n\n" +

                               $"Degree Predominately Awarded: {FillReportProperty(line,"PREDDEG")} \n" +
                               $"Highest Degree Awarded: {FillReportProperty(line,"HIGHDEG")} \n" +
                               $"Admission Rate: {FillReportProperty(line,"ADM_RATE")}\n" +
                               $"School URL: {FillReportProperty(line,"INSTURL")}\n\n\n"
                               );
            }
            try
            {

                if (outPutString.Length != 0)
                {
                                      
                    saveDialog.FileName = "CollegeReportDocument"; // Default file name
                    saveDialog.DefaultExt = ".txt"; // Default file extension
                    saveDialog.Filter = "Text documents (.txt)|*.txt"; // Filter files by extension

                   
                    Nullable<bool> result = saveDialog.ShowDialog();

                    // Process save file dialog box results
                    if (result == true)
                    {
                        Stream stream1 = File.Open(saveDialog.FileName, FileMode.Create);
                        StreamWriter streamWriter1 = new StreamWriter(stream1);

                        streamWriter1.Write(outPutString.ToString());
                        streamWriter1.Flush();
                        streamWriter1.Close();
                                                
                        message = $"saving to {saveDialog.FileName}";
                    }
                                                            
                }
                else
                {
                    message= "Sorry no entries for that school could be found.";
                }
            }
            catch(Exception)
            {
                message = $"The file {saveDialog.FileName} could not be written to";
                // Console.log(e.message());
            }
            finally
            {
                message += " Thank you for using College Report app";
                MessageBox.Show(message);
            }
            
        }

        private string DegreePredominace(string numberStr)
        {
            int.TryParse(numberStr, out int numberInt);
            string toReturn;

            switch (numberInt)
            {
                case 0:
                     toReturn = "Not classified";
                     break;
                case 1:
                    toReturn = "Predominantly certificate-degree granting";
                    break;
                case 2:
                    toReturn = "Predominantly associate's-degree granting";
                    break;
                case 3:
                    toReturn = "Predominantly bachelor's-degree granting";
                    break;
                case 4:
                    toReturn = "Entirely graduate-degree granting";
                    break;
                default:
                    toReturn = "No degree information is available";
                    break;
            }

            return toReturn;
        }
        private string HighestDegree(string numberStr)
        {
            int.TryParse(numberStr, out int numberInt);
            string toReturn;

            switch (numberInt)
            {
                case 0:
                    toReturn = "Non-degree-granting";
                    break;
                case 1:
                    toReturn = "Certificate degree";
                    break;
                case 2:
                    toReturn = "Associate degree";
                    break;
                case 3:
                    toReturn = "Bachelor's degree";
                    break;
                case 4:
                    toReturn = "Graduate degree";
                    break;
                default:
                    toReturn = "NA";
                    break;
            }

            return toReturn;
        }

        private string FillReportProperty(string[] line, string property)
        {
            string toReturn="";

            if (property.Equals("PREDDEG"))
            {
                toReturn = DegreePredominace(line[PropertyPosition[property]]);
            }
            else if (property.Equals("HIGHDEG"))
            {
                toReturn = HighestDegree(line[PropertyPosition[property]]);
            }
            else
            {
                toReturn = line[PropertyPosition[property]];
            }

            if (toReturn.Equals("NULL"))
            {
                toReturn = "NA";
            }

            return toReturn;
        }
        
        private void PrintDict(Dictionary<string, int> dict)
        {
           
            foreach(var item in dict.Keys)
            {
                Console.WriteLine($"{item} {dict[item]}");
            }
        }
    
    }
}
